# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
- group: passwords

jobs:
- job: 'BuildMacDmg1014'
  pool:
    vmImage: 'macOS-10.14'

  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)
      
  - script: |
      brew install create-dmg
    displayName: 'Install dependencies with HomeBrew'
    
  - script: |
      pip3 install -U py2app
      pip3 install thymiodirect websockets websocket websocket_client qrcode
      pip3 install pyobjc-core
      pip3 install pyobjc-framework-cocoa
      make VPLServer.dmg
    displayName: 'Make dmg'
    
  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: '*.dmg'
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'VPLServer-10-14.dmg'

- job: 'BuildMacDmg1015'
  pool:
    vmImage: 'macOS-10.15'

  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)
      
  - script: |
      brew install create-dmg
    displayName: 'Install dependencies with HomeBrew'
    
  - script: |
      pip3 install -U py2app
      pip3 install thymiodirect websockets websocket websocket_client qrcode
      pip3 install pyobjc-core
      pip3 install pyobjc-framework-cocoa
      make VPLServer.dmg
    displayName: 'Make dmg'
    
  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: '*.dmg'
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'VPLServer-10-15.dmg'

- job: 'BuildMacDmg11'
  pool:
    vmImage: 'macOS-11'

  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)
      
  - script: |
      brew install create-dmg
    displayName: 'Install dependencies with HomeBrew'
    
  - script: |
      pip3 install -U py2app
      pip3 install thymiodirect websockets websocket websocket_client qrcode
      pip3 install pyobjc-core
      pip3 install pyobjc-framework-cocoa
      make VPLServer.dmg
    displayName: 'Make dmg'
    
  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: '*.dmg'
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'VPLServer-11.dmg'



- job: 'BuildWindows'
  pool:
    vmImage: 'windows-2019'

  steps:
  - script: |
      python3 -m pip install py2app
      python3 -m pip install cx_Freeze
      python3 -m pip install thymiodirect websockets websocket websocket_client qrcode
      python3 -m pip install tk
    displayName: 'Install with pip'
    
      
  - powershell: |
      python3 setup_cx_freeze.py bdist_msi
    displayName: 'Build msi'
    
  - task: codesigning@2
    inputs:
      secureFileId: 'mobsya-windows.pfx'
      signCertPassword: '$(mobsya-win-p12)'
      files: '**/dist/*.msi'
      timeServer: 'http://timestamp.digicert.com'
      hashingAlgorithm: 'SHA256'
      
  - powershell: |
      $compress = @{
        Path = ".\dist\*win64.msi", "readme-win.txt"
        CompressionLevel = "Fastest"
        DestinationPath = "VPL3Server-win.zip"
      }
      Compress-Archive -Force @compress
    displayName: 'Create Zip'
    
  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: '*.zip'
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'VPLServerWin.zip'

